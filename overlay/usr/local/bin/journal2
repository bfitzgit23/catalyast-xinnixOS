#!/usr/bin/env python3
import re
import sys
import json
import os
import subprocess
import webbrowser
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QListWidget,
                             QVBoxLayout, QCalendarWidget, QMenuBar, QAction,
                             QMessageBox, QInputDialog, QTextEdit, QWidget, 
                             QPushButton, QHBoxLayout, QLineEdit, QFileDialog, 
                             QListWidgetItem)
from PyQt5.QtGui import QPalette, QDesktopServices
from PyQt5.QtCore import Qt, QDateTime, QUrl
from datetime import datetime


FILE_PATH = os.path.join(os.path.expanduser('~'), 'Documents', 'journal_entries.txt')

#DEFAULT_FONT_SIZE = 12  # Set your desired default font size here 

class JournalTab(QWidget):
    #DEFAULT_FONT_SIZE = 12  # Set your desired default font size here 
    def __init__(self, entries_data):
        super().__init__()


        self.entries_data = entries_data

        self.layout = QVBoxLayout(self)



        # Entry manipulation area
        self.entry_buttons_layout = QHBoxLayout()
        self.add_entry_button = QPushButton("Add Entry", self)
        self.add_entry_button.clicked.connect(self.new_journal_entry)
        self.delete_entry_button = QPushButton("Delete Entry", self)
        self.delete_entry_button.clicked.connect(self.delete_journal_entry)
        self.entry_buttons_layout.addWidget(self.add_entry_button)
        self.entry_buttons_layout.addWidget(self.delete_entry_button)
        #self.edit_entry_button = QPushButton("Edit Entry", self)
        #self.edit_entry_button.clicked.connect(self.edit_journal_entry)
        #self.entry_buttons_layout.addWidget(self.edit_entry_button)

        # Inside the __init__ method of the JournalTab class
        self.font_size_increase_button = QPushButton("Increase Font", self)
        self.font_size_increase_button.clicked.connect(self.increase_font_size)

        self.font_size_decrease_button = QPushButton("Decrease Font", self)
        self.font_size_decrease_button.clicked.connect(self.decrease_font_size)

        self.entry_buttons_layout.addWidget(self.font_size_increase_button)
        self.entry_buttons_layout.addWidget(self.font_size_decrease_button)




        self.journal_list = QListWidget(self)
        self.journal_list.itemClicked.connect(self.load_selected_journal_entry)
        
        # Add a new "Clear All" button
        self.clear_all_button = QPushButton("Clear All", self)
        self.clear_all_button.clicked.connect(self.clear_all_entries)
        self.entry_buttons_layout.addWidget(self.clear_all_button)


        self.entry_content = QTextEdit(self)
        #self.entry_content.setFontPointSize(self.DEFAULT_FONT_SIZE)  # Set default font size
        #self.save_entry_button = QPushButton("Save Entry", self)
        #self.save_entry_button.clicked.connect(self.save_current_journal_content)
        self.entry_content.clear()

        self.layout.addLayout(self.entry_buttons_layout)
        self.layout.addWidget(self.journal_list)
        self.layout.addWidget(self.entry_content)
        #self.layout.addWidget(self.save_entry_button)

        self.setLayout(self.layout)

        # Set the path to the journal text file
        self.journal_file_path = os.path.expanduser("~/Documents/journal_entries.txt")

        # Load existing journal entries
        self.load_journal_entries()



    def increase_font_size(self):
        current_font = self.entry_content.font()
        print("Current Font Size:", current_font.pointSize())
        new_size = current_font.pointSize() + 1
        print("New Font Size:", new_size)
        current_font.setPointSize(new_size)
        self.entry_content.setFont(current_font)

    def decrease_font_size(self):
        current_font = self.entry_content.font()
        print("Current Font Size:", current_font.pointSize())
        new_size = max(1, current_font.pointSize() - 1)
        print("New Font Size:", new_size)
        current_font.setPointSize(new_size)
        self.entry_content.setFont(current_font)




    def reset_font_size_to_default(self):
        current_font = self.entry_content.font()
        current_font.setPointSize(JournalTab.DEFAULT_FONT_SIZE)
        self.entry_content.setFont(current_font)






    def clear_all_entries(self):
        self.entry_content.clear()
        

    def delete_journal_entry(self):
        current_item = self.journal_list.currentItem()
        if current_item:
            title = current_item.text().split(" - ")[0]
            self.journal_list.takeItem(self.journal_list.row(current_item))
            self.remove_entry_from_file(title)
            self.entry_content.clear()

            # Wipe the file and rewrite the remaining entries
            self.clear_entries_file()
            self.rewrite_remaining_entries()

    def clear_entries_file(self):
        with open(self.journal_file_path, 'w') as file:
            file.write("")

    def rewrite_remaining_entries(self):
        for index in range(self.journal_list.count()):
            title_date_text = self.journal_list.item(index).text()
            title, date = self.split_title_date(title_date_text)
            extracted_content = self.get_entry_content_from_file(title, date)
            new_entry = f"Title: {title}\nDate: {date}\nContent:\n{extracted_content}\n=====\n"
            self.save_entry_to_file(new_entry)





    def edit_journal_entry(self):
        current_item = self.journal_list.currentItem()
        if current_item:
            title_date = current_item.text()
            title, date = self.split_title_date(title_date)
            new_title, ok = QInputDialog.getText(self, 'Edit Journal Entry', 'Edit the title of the entry:', text=title)
            if ok and new_title:
                # Remove the old entry and save the updated one
                self.remove_entry_from_file(title)
                new_date = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
                new_content = self.entry_content.toPlainText()
                new_entry = f"Title: {new_title}\nDate: {new_date}\nContent:\n{new_content}\n=====\n"
                self.save_entry_to_file(new_entry)
                self.load_journal_entries()



    def add_journal_entry(self, title, content):
        with open(self.journal_file_path, 'a') as file:
            date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Current date and time
            file.write(f"Title: {title}\nDate: {date}\nContent:\n{content}\n=====\n")




    def new_journal_entry(self):
        date = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
        title, ok = QInputDialog.getText(self, 'New Journal Entry', 'Title of the entry:')
        if ok and title:
            entry_content = self.entry_content.toPlainText()  # Get the content from the QTextEdit
            print("Entry Content:", entry_content)  # Add this line to print the entry content
            entry = f"Title: {title}\nDate: {date}\nContent:\n{entry_content}\n=====\n"
            self.save_entry_to_file(entry)
            self.journal_list.addItem(title + " - " + date)




    def load_selected_journal_entry(self, selected_item):
        if selected_item:
            title_date_text = selected_item.text()
            print("Title Date Text:", title_date_text) # Debugging
            title, date = self.split_title_date(title_date_text)
            print("Title:", title, "Date:", date) # Debugging
            extracted_content = self.get_entry_content_from_file(title, date)
            print("Extracted content:\n", extracted_content)  # Print the extracted content
            self.entry_content.setPlainText(extracted_content)

    



    def split_title_date(self, title_date):
        parts = title_date.split()
        date = " ".join(parts[-2:])
        title = " ".join(parts[:-2])
        return title, date



    def get_entry_content_from_file(self, title, date):
        search_string = f"Title: {title}\nDate: {date}"
        with open(self.journal_file_path, 'r') as file:
            entries = file.read()
            print("File Content:\n", entries) # Debugging
            entry_start = entries.find(search_string)
            print("Entry start index:", entry_start) # Debugging
            if entry_start != -1:
                entry_end = entries.find("=====", entry_start)
                print("Entry end index:", entry_end) # Debugging
                if entry_end != -1:
                    extracted_content = entries[entry_start + len(search_string) + 1:entry_end].strip()  # Strip whitespace
                    return extracted_content
        return ""


    
    def split_title_date(self, title_date_text):
        title, date = title_date_text.split(' - ', 1)
        return title, date






    def load_journal_entries(self):
        self.journal_list.clear()
        if os.path.exists(self.journal_file_path):
            with open(self.journal_file_path, 'r') as file:
                entry_text = file.read()
                entries = entry_text.split("=====\n")
                for entry in entries:
                    if entry.strip():
                        entry_info = entry.split("\n", 3)
                        title = entry_info[0][7:]
                        date = entry_info[1][6:]
                        self.journal_list.addItem(title + " - " + date)

    #def save_current_journal_content(self):
        #if self.journal_list.currentItem():
            #selected_title = self.journal_list.currentItem().text()
            #new_content = self.entry_content.toPlainText()  # Get the new content from the QTextEdit
            #self.update_journal_entry(selected_title, new_content)  # Update the journal entry
           # self.load_journal_entries()

    def update_journal_entry(self, title, new_content):
        self.remove_entry_from_file(title)
        date = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
        entry = f"Title: {title}\nDate: {date}\nContent:\n{new_content}\n=====\n"
        self.save_entry_to_file(entry)

    def save_entry_to_file(self, entry):
        print("Saving Entry to File:", entry)  # Add this line to print the entry before saving
        with open(self.journal_file_path, 'a') as file:
            file.write(entry)


    def remove_entry_from_file(self, title):
        with open(self.journal_file_path, 'r') as file:
            entries = file.read()
        with open(self.journal_file_path, 'w') as file:
            entry_delimiter = "=====\n"
            entries = entries.split(entry_delimiter)
            entries = [entry for entry in entries if not entry.startswith(f"Title: {title}\n")]
            file.write(entry_delimiter.join(entries))




class ToDoTab(QWidget):
    def __init__(self, entries_data):
        super().__init__()

        self.entries_data = entries_data

        if 'to-do' not in self.entries_data:
            self.entries_data['to-do'] = []

        # Load data from file if available
        self.load_data_from_file()

        self.layout = QVBoxLayout(self)

        self.todo_input = QLineEdit(self)
        self.add_todo_button = QPushButton("Add Task", self)
        self.add_todo_button.clicked.connect(self.add_todo_item)

        self.todo_list = QListWidget(self)
        self.todo_list.itemDoubleClicked.connect(self.open_attachment)

        self.subtask_input = QLineEdit(self)
        self.add_subtask_button = QPushButton("Add Subtask", self)
        self.add_subtask_button.clicked.connect(self.add_subtask_item)

        self.attach_file_button = QPushButton("Attach File", self)
        self.attach_file_button.clicked.connect(self.attach_file)

        self.remove_todo_button = QPushButton("Remove Task", self)
        self.remove_todo_button.clicked.connect(self.remove_todo_item)

        # Inside the `ToDoTab` class
        self.remove_subtask_button = QPushButton("Remove Subtask", self)
        self.remove_subtask_button.clicked.connect(self.remove_subtask_item)


        self.remove_attachment_button = QPushButton("Remove Attachment or URL", self)
        self.remove_attachment_button.clicked.connect(self.remove_attachment_item)


        self.url_input = QLineEdit(self)
        self.add_url_button = QPushButton("Attach URL", self)
        self.url_input.setPlaceholderText("Add URL here")
        self.add_url_button.clicked.connect(self.attach_url)

        self.save_todo_button = QPushButton("Save To-Do List", self)
        self.save_todo_button.clicked.connect(self.save_todo_to_default_file)

        self.layout.addWidget(self.todo_input)
        self.layout.addWidget(self.add_todo_button)
        self.layout.addWidget(self.todo_list)
        self.layout.addWidget(self.subtask_input)
        self.layout.addWidget(self.add_subtask_button)
        self.layout.addWidget(self.attach_file_button)
        self.layout.addWidget(self.remove_todo_button)
        self.layout.addWidget(self.url_input)
        self.layout.addWidget(self.add_url_button)        
        self.layout.addWidget(self.remove_subtask_button)  # Add the new button
        self.layout.addWidget(self.remove_attachment_button)  # Add the new button
        self.layout.addWidget(self.save_todo_button)



        self.setLayout(self.layout)
        self.populate_todo_list()


    def remove_subtask_item(self):
        current_item = self.todo_list.currentItem()
        if current_item and current_item.text().startswith("→"):
            subtask_text = current_item.text()[2:]  # Remove the "→ " prefix
            for task in self.entries_data['to-do']:
                for subtask in task['sub-tasks']:
                    if subtask == subtask_text:
                        task['sub-tasks'].remove(subtask)
                        self.populate_todo_list()
                        return

    def remove_url_item(self):
        current_item = self.todo_list.currentItem()
        if current_item and current_item.text().startswith("http"):
            url = current_item.text()
            for task in self.entries_data['to-do']:
                for attachment in task['attachments']:
                    if attachment == url:
                        task['attachments'].remove(attachment)
                        self.populate_todo_list()
                        return

    def remove_attachment_item(self):
        current_item = self.todo_list.currentItem()
        if current_item and current_item.text().startswith("📎"):
            attachment_name = current_item.text()[2:]  # Remove the "📎 " prefix
            for task in self.entries_data['to-do']:
                for attachment in task['attachments']:
                    if os.path.basename(attachment) == attachment_name:
                        task['attachments'].remove(attachment)
                        self.populate_todo_list()
                        return



    def populate_todo_list(self):
        print("Populating to-do list...")
        print("Entries data:", self.entries_data)  # Debug print
        print("To-Do items:", self.entries_data.get('to-do', []))  # Debug print
        self.todo_list.clear()
        for task in self.entries_data.get('to-do', []):
            print("Task:", task)  # Debug print
            item = QListWidgetItem(task['task'])
            item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
            item.setCheckState(Qt.Unchecked)
            self.todo_list.addItem(item)

            for subtask in task.get('sub-tasks', []):
                sub_item = QListWidgetItem("→ " + subtask)
                sub_item.setFlags(sub_item.flags() | Qt.ItemIsUserCheckable)
                sub_item.setCheckState(Qt.Unchecked)
                self.todo_list.addItem(sub_item)

            for attached_file in task.get('attachments', []):
                self.todo_list.addItem("📎 " + os.path.basename(attached_file))

        print("Items in the list:", self.todo_list.count())  # Debug print


    def load_data_from_file(self):
        default_file_path = os.path.join(os.path.expanduser('~'), 'Documents', 'stormos_todo.txt')
        if os.path.exists(default_file_path):
            with open(default_file_path, 'r') as file:
                lines = file.readlines()
                task = None
                sub_tasks = []
                attachments = []
                for line in lines:
                    if line.startswith("Task:"):
                        if task is not None:
                            self.entries_data['to-do'].append({'task': task, 'sub-tasks': sub_tasks, 'attachments': attachments})
                        task = line.split("Task:", 1)[1].strip()
                        sub_tasks = []
                        attachments = []
                    elif line.startswith("  -"):
                        sub_task = line.split("-", 1)[1].strip()
                        sub_tasks.append(sub_task)
                    elif line.startswith("  📎"):
                        attachment = line.split("📎", 1)[1].strip()
                        attachments.append(attachment)
                if task is not None:
                    self.entries_data['to-do'].append({'task': task, 'sub-tasks': sub_tasks, 'attachments': attachments})




    def save_todo_to_default_file(self):
        try:
            default_file_path = os.path.join(os.path.expanduser('~'), 'Documents', 'stormos_todo.txt')
            with open(default_file_path, 'w') as file:
                for task in self.entries_data['to-do']:
                    file.write(f"Task: {task['task']}\n")
                    for subtask in task['sub-tasks']:
                        file.write(f"  - {subtask}\n")
                    for attached_file in task['attachments']:
                        file.write(f"  📎 {os.path.basename(attached_file)}\n")
                    file.write("\n")
            QMessageBox.information(self, 'To-Do List', 'To-Do list saved to default file successfully!')

            self.populate_todo_list()  # Refresh the UI after saving
            self.todo_list.update()     # Manually update the UI

        except Exception as e:
            QMessageBox.critical(self, 'Error', f'Error while saving to-do list: {e}')


    def add_todo_item(self):
        task_text = self.todo_input.text().strip()
        if task_text:
            self.entries_data['to-do'].append({'task': task_text, 'sub-tasks': [], 'attachments': []})
            self.populate_todo_list()

    def add_subtask_item(self):
        subtask_text = self.subtask_input.text().strip()
        if subtask_text and self.todo_list.currentItem() and not self.todo_list.currentItem().text().startswith("→") and not self.todo_list.currentItem().text().startswith("📎"):
            for task in self.entries_data['to-do']:
                if task['task'] == self.todo_list.currentItem().text():
                    task['sub-tasks'].append(subtask_text)
                    self.populate_todo_list()
                    return

    def attach_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select a file to attach")
        if file_path:
            current_item = self.todo_list.currentItem()
            if current_item:  # Check if an item is selected
                current_item_text = current_item.text()
                for task in self.entries_data['to-do']:
                    if task['task'] == current_item_text:
                        task['attachments'].append(file_path)
                        self.populate_todo_list()
                        return


    def remove_todo_item(self):
        current_item = self.todo_list.currentItem()
        if current_item:
            item_text = current_item.text()
            for i, task in enumerate(self.entries_data['to-do']):
                if task['task'] == item_text:
                    del self.entries_data['to-do'][i]
                    self.populate_todo_list()
                    return

    def open_attachment(self, item):
        # Check if it's an attachment or a URL
        if item.text().startswith("📎"):
            for task in self.entries_data['to-do']:
                for attached_file_or_url in task['attachments']:
                    if os.path.basename(attached_file_or_url) == item.text()[2:].strip():
                        # If it looks like a URL, open it as a URL
                        if "http://" in attached_file_or_url or "https://" in attached_file_or_url:
                            webbrowser.open(attached_file_or_url)
                        else: # Else, assume it's a file and try to open it
                            if os.path.exists(attached_file_or_url):
                                try:
                                    if os.name == 'nt':  # For Windows
                                        subprocess.run(['start', attached_file_or_url], check=True, shell=True)
                                    elif os.name == 'mac':  # For MacOS
                                        subprocess.run(['open', attached_file_or_url], check=True)
                                    else:  # For Linux
                                        subprocess.run(['xdg-open', attached_file_or_url], check=True)
                                except Exception as e:
                                    print(f"Failed to open: {attached_file_or_url} due to {e}")  # Debug print
                            else:
                                # If file doesn't exist, inform the user
                                print(f"File {attached_file_or_url} does not exist!")
                        return






    def attach_url(self):
        url = self.url_input.text().strip()
        if url:
            if not url.startswith(('http://', 'https://')):
                url = 'http://' + url  # default to http if no protocol is provided
            current_item = self.todo_list.currentItem()
            if current_item:  # Check if an item is selected
                current_item_text = current_item.text()
                for task in self.entries_data['to-do']:
                    if task['task'] == current_item_text:
                        task['attachments'].append(url)
                        self.populate_todo_list()
                        return









class StormOSJournal2(QMainWindow):
    def __init__(self):
        super().__init__()

        self.entries_data = {
            'journal': [],
            'todo': [],
            'calendar': []
        }


        self.init_ui()

    def init_ui(self):
        self.setWindowTitle('StormOS Journal2')
        self.setGeometry(100, 100, 800, 600)

        self.tabs = QTabWidget(self)

        # Initialize tabs
        self.journal_tab = JournalTab(self.entries_data)

        self.tabs.addTab(self.journal_tab, "Journal Entries")

        self.todo_tab = ToDoTab(self.entries_data)
        self.tabs.addTab(self.todo_tab, "To-Do")



        # Add other tabs as needed

        self.setCentralWidget(self.tabs)
        self.setup_menu()

        # Status Bar
        current_date_time = QDateTime.currentDateTime()
        self.statusBar().showMessage(current_date_time.toString("MMMM yyyy hh:mm A"))

    def setup_menu(self):
        menubar = QMenuBar(self)
        self.setMenuBar(menubar)

        #save_action = QAction('Save', self)
        #save_action.triggered.connect(self.save_data)
        #menubar.addAction(save_action)

    def save_data(self):
        with open(FILE_PATH, 'w') as file:
            json.dump(self.entries_data, file)

        QMessageBox.information(self, 'StormOS Journal2', 'Data saved successfully!')


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = StormOSJournal2()
    window.show()
    sys.exit(app.exec_())
